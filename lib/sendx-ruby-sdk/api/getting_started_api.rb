=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.0
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SendX
  class GettingStartedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Identify contact
    # Identify a contact by email address. If the contact already exists, it will be updated.
    # @param identify_request [IdentifyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [IdentifyResponse]
    def identify_contact(identify_request, opts = {})
      data, _status_code, _headers = identify_contact_with_http_info(identify_request, opts)
      data
    end

    # Identify contact
    # Identify a contact by email address. If the contact already exists, it will be updated.
    # @param identify_request [IdentifyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentifyResponse, Integer, Hash)>] IdentifyResponse data, response status code and response headers
    def identify_contact_with_http_info(identify_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GettingStartedApi.identify_contact ...'
      end
      # verify the required parameter 'identify_request' is set
      if @api_client.config.client_side_validation && identify_request.nil?
        fail ArgumentError, "Missing the required parameter 'identify_request' when calling GettingStartedApi.identify_contact"
      end
      # resource path
      local_var_path = '/contact/identify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(identify_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IdentifyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"GettingStartedApi.identify_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GettingStartedApi#identify_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Tracking info
    # Track a contact
    # @param track_request [TrackRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TrackResponse]
    def tracking_contact(track_request, opts = {})
      data, _status_code, _headers = tracking_contact_with_http_info(track_request, opts)
      data
    end

    # Add Tracking info
    # Track a contact
    # @param track_request [TrackRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrackResponse, Integer, Hash)>] TrackResponse data, response status code and response headers
    def tracking_contact_with_http_info(track_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GettingStartedApi.tracking_contact ...'
      end
      # verify the required parameter 'track_request' is set
      if @api_client.config.client_side_validation && track_request.nil?
        fail ArgumentError, "Missing the required parameter 'track_request' when calling GettingStartedApi.tracking_contact"
      end
      # resource path
      local_var_path = '/contact/track'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(track_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TrackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"GettingStartedApi.tracking_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GettingStartedApi#tracking_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
