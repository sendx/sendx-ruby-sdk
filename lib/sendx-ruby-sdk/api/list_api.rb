=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.0
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SendX
  class ListApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create List
    # Create a new list.
    # @param list_request [ListRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateResponse]
    def create_list(list_request, opts = {})
      data, _status_code, _headers = create_list_with_http_info(list_request, opts)
      data
    end

    # Create List
    # Create a new list.
    # @param list_request [ListRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateResponse, Integer, Hash)>] CreateResponse data, response status code and response headers
    def create_list_with_http_info(list_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListApi.create_list ...'
      end
      # verify the required parameter 'list_request' is set
      if @api_client.config.client_side_validation && list_request.nil?
        fail ArgumentError, "Missing the required parameter 'list_request' when calling ListApi.create_list"
      end
      # resource path
      local_var_path = '/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListApi.create_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#create_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete List
    # Deletes a specific list by its ID.
    # @param list_id [String] The ID of the list you want to delete
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_list(list_id, opts = {})
      data, _status_code, _headers = delete_list_with_http_info(list_id, opts)
      data
    end

    # Delete List
    # Deletes a specific list by its ID.
    # @param list_id [String] The ID of the list you want to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_list_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListApi.delete_list ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListApi.delete_list"
      end
      # resource path
      local_var_path = '/list/{listId}'.sub('{' + 'listId' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListApi.delete_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#delete_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Lists
    # Retrieve all lists for the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :limit Limit the number of results returned.
    # @option opts [String] :search Search term to filter lists.
    # @return [Array<ListModel>]
    def get_all_lists(opts = {})
      data, _status_code, _headers = get_all_lists_with_http_info(opts)
      data
    end

    # Get All Lists
    # Retrieve all lists for the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination.
    # @option opts [Integer] :limit Limit the number of results returned.
    # @option opts [String] :search Search term to filter lists.
    # @return [Array<(Array<ListModel>, Integer, Hash)>] Array<ListModel> data, response status code and response headers
    def get_all_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListApi.get_all_lists ...'
      end
      # resource path
      local_var_path = '/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListModel>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListApi.get_all_lists",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_all_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List
    # Retrieve a specific list by its ID.
    # @param list_id [String] The ID of the list you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [ListModel]
    def get_list_by_id(list_id, opts = {})
      data, _status_code, _headers = get_list_by_id_with_http_info(list_id, opts)
      data
    end

    # Get List
    # Retrieve a specific list by its ID.
    # @param list_id [String] The ID of the list you want to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListModel, Integer, Hash)>] ListModel data, response status code and response headers
    def get_list_by_id_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListApi.get_list_by_id ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListApi.get_list_by_id"
      end
      # resource path
      local_var_path = '/list/{listId}'.sub('{' + 'listId' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListApi.get_list_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_list_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update List
    # Update an existing list by its ID.
    # @param list_request [ListRequest] 
    # @param list_id [String] The ID of the list to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def update_list(list_request, list_id, opts = {})
      data, _status_code, _headers = update_list_with_http_info(list_request, list_id, opts)
      data
    end

    # Update List
    # Update an existing list by its ID.
    # @param list_request [ListRequest] 
    # @param list_id [String] The ID of the list to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def update_list_with_http_info(list_request, list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListApi.update_list ...'
      end
      # verify the required parameter 'list_request' is set
      if @api_client.config.client_side_validation && list_request.nil?
        fail ArgumentError, "Missing the required parameter 'list_request' when calling ListApi.update_list"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListApi.update_list"
      end
      # resource path
      local_var_path = '/list/{listId}'.sub('{' + 'listId' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListApi.update_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#update_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
