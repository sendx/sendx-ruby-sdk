=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.0
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SendX
  class EventApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Record a revenue event for a specific contact
    # Records a revenue event, which can be attributed to campaigns, drips, workflows, or other sources of user interaction.
    # @param revenue_event_request [RevenueEventRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EventResponse]
    def create_revenue_event(revenue_event_request, opts = {})
      data, _status_code, _headers = create_revenue_event_with_http_info(revenue_event_request, opts)
      data
    end

    # Record a revenue event for a specific contact
    # Records a revenue event, which can be attributed to campaigns, drips, workflows, or other sources of user interaction.
    # @param revenue_event_request [RevenueEventRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventResponse, Integer, Hash)>] EventResponse data, response status code and response headers
    def create_revenue_event_with_http_info(revenue_event_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventApi.create_revenue_event ...'
      end
      # verify the required parameter 'revenue_event_request' is set
      if @api_client.config.client_side_validation && revenue_event_request.nil?
        fail ArgumentError, "Missing the required parameter 'revenue_event_request' when calling EventApi.create_revenue_event"
      end
      # resource path
      local_var_path = '/events/revenue'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(revenue_event_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventApi.create_revenue_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventApi#create_revenue_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Push a custom event associated with a contact
    # Pushes a custom event with properties and values for a specified contact.
    # @param custom_event_request [CustomEventRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EventResponse]
    def push_custom_event(custom_event_request, opts = {})
      data, _status_code, _headers = push_custom_event_with_http_info(custom_event_request, opts)
      data
    end

    # Push a custom event associated with a contact
    # Pushes a custom event with properties and values for a specified contact.
    # @param custom_event_request [CustomEventRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventResponse, Integer, Hash)>] EventResponse data, response status code and response headers
    def push_custom_event_with_http_info(custom_event_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventApi.push_custom_event ...'
      end
      # verify the required parameter 'custom_event_request' is set
      if @api_client.config.client_side_validation && custom_event_request.nil?
        fail ArgumentError, "Missing the required parameter 'custom_event_request' when calling EventApi.push_custom_event"
      end
      # resource path
      local_var_path = '/events/custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(custom_event_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventApi.push_custom_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventApi#push_custom_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
