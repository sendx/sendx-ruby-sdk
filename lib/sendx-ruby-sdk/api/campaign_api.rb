=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.1
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SendX
  class CampaignApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Campaign
    # Create a new email campaign
    # @param campaign_request [CampaignRequest] The campaign content
    # @param [Hash] opts the optional parameters
    # @return [CreateResponse]
    def create_campaign(campaign_request, opts = {})
      data, _status_code, _headers = create_campaign_with_http_info(campaign_request, opts)
      data
    end

    # Create Campaign
    # Create a new email campaign
    # @param campaign_request [CampaignRequest] The campaign content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateResponse, Integer, Hash)>] CreateResponse data, response status code and response headers
    def create_campaign_with_http_info(campaign_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignApi.create_campaign ...'
      end
      # verify the required parameter 'campaign_request' is set
      if @api_client.config.client_side_validation && campaign_request.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_request' when calling CampaignApi.create_campaign"
      end
      # resource path
      local_var_path = '/campaign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(campaign_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"CampaignApi.create_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignApi#create_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Campaign
    # Deletes a specific campaign by its campaignId.
    # @param campaign_id [String] The ID of the campaign to delete
    # @param [Hash] opts the optional parameters
    # @return [DeleteCampaign200Response]
    def delete_campaign(campaign_id, opts = {})
      data, _status_code, _headers = delete_campaign_with_http_info(campaign_id, opts)
      data
    end

    # Delete Campaign
    # Deletes a specific campaign by its campaignId.
    # @param campaign_id [String] The ID of the campaign to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteCampaign200Response, Integer, Hash)>] DeleteCampaign200Response data, response status code and response headers
    def delete_campaign_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignApi.delete_campaign ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignApi.delete_campaign"
      end
      # resource path
      local_var_path = '/campaign/{campaignId}'.sub('{' + 'campaignId' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteCampaign200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"CampaignApi.delete_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignApi#delete_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit Campaign
    # Submit edited content for a specific campaign.
    # @param campaign_request [CampaignRequest] 
    # @param campaign_id [String] The ID of the campaign to edit
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def edit_campaign(campaign_request, campaign_id, opts = {})
      data, _status_code, _headers = edit_campaign_with_http_info(campaign_request, campaign_id, opts)
      data
    end

    # Edit Campaign
    # Submit edited content for a specific campaign.
    # @param campaign_request [CampaignRequest] 
    # @param campaign_id [String] The ID of the campaign to edit
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def edit_campaign_with_http_info(campaign_request, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignApi.edit_campaign ...'
      end
      # verify the required parameter 'campaign_request' is set
      if @api_client.config.client_side_validation && campaign_request.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_request' when calling CampaignApi.edit_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignApi.edit_campaign"
      end
      # resource path
      local_var_path = '/campaign/{campaignId}'.sub('{' + 'campaignId' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(campaign_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Campaign'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"CampaignApi.edit_campaign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignApi#edit_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Campaigns
    # Retrieve a list of all campaigns.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination (default to 0)
    # @option opts [Integer] :limit Limit for pagination (default to 20)
    # @option opts [String] :search Search term to filter campaigns
    # @return [Array<Campaign>]
    def get_all_campaigns(opts = {})
      data, _status_code, _headers = get_all_campaigns_with_http_info(opts)
      data
    end

    # Get All Campaigns
    # Retrieve a list of all campaigns.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination (default to 0)
    # @option opts [Integer] :limit Limit for pagination (default to 20)
    # @option opts [String] :search Search term to filter campaigns
    # @return [Array<(Array<Campaign>, Integer, Hash)>] Array<Campaign> data, response status code and response headers
    def get_all_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignApi.get_all_campaigns ...'
      end
      # resource path
      local_var_path = '/campaign'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Campaign>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"CampaignApi.get_all_campaigns",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignApi#get_all_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Campaign By Id
    # Retrieve a specific campaign using its ID.
    # @param campaign_id [String] The ID of the campaign to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def get_campaign_by_id(campaign_id, opts = {})
      data, _status_code, _headers = get_campaign_by_id_with_http_info(campaign_id, opts)
      data
    end

    # Get Campaign By Id
    # Retrieve a specific campaign using its ID.
    # @param campaign_id [String] The ID of the campaign to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def get_campaign_by_id_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignApi.get_campaign_by_id ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignApi.get_campaign_by_id"
      end
      # resource path
      local_var_path = '/campaign/{campaignId}'.sub('{' + 'campaignId' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Campaign'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"CampaignApi.get_campaign_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignApi#get_campaign_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
