=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.1
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SendX
  class TagsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Tag
    # Create a new tag for the account
    # @param tag_request [TagRequest] The tag content
    # @param [Hash] opts the optional parameters
    # @return [CreateResponse]
    def create_tag(tag_request, opts = {})
      data, _status_code, _headers = create_tag_with_http_info(tag_request, opts)
      data
    end

    # Create a Tag
    # Create a new tag for the account
    # @param tag_request [TagRequest] The tag content
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateResponse, Integer, Hash)>] CreateResponse data, response status code and response headers
    def create_tag_with_http_info(tag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.create_tag ...'
      end
      # verify the required parameter 'tag_request' is set
      if @api_client.config.client_side_validation && tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'tag_request' when calling TagsApi.create_tag"
      end
      # resource path
      local_var_path = '/tag'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tag_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"TagsApi.create_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#create_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Tag
    # Delete an existing tag by ID
    # @param tag_id [String] ID of the tag to delete
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_tag(tag_id, opts = {})
      data, _status_code, _headers = delete_tag_with_http_info(tag_id, opts)
      data
    end

    # Delete a Tag
    # Delete an existing tag by ID
    # @param tag_id [String] ID of the tag to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_tag_with_http_info(tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.delete_tag ...'
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling TagsApi.delete_tag"
      end
      # resource path
      local_var_path = '/tag/{tagId}'.sub('{' + 'tagId' + '}', CGI.escape(tag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"TagsApi.delete_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#delete_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Tags
    # Retrieve all tags for the account with optional pagination and search filters
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination
    # @option opts [Integer] :limit Limit the number of results
    # @option opts [String] :search Search term to filter tags
    # @return [Array<Tag>]
    def get_all_tags(opts = {})
      data, _status_code, _headers = get_all_tags_with_http_info(opts)
      data
    end

    # Get All Tags
    # Retrieve all tags for the account with optional pagination and search filters
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Offset for pagination
    # @option opts [Integer] :limit Limit the number of results
    # @option opts [String] :search Search term to filter tags
    # @return [Array<(Array<Tag>, Integer, Hash)>] Array<Tag> data, response status code and response headers
    def get_all_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.get_all_tags ...'
      end
      # resource path
      local_var_path = '/tag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Tag>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"TagsApi.get_all_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#get_all_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Tag by ID
    # Retrieve a tag based on the provided tag ID
    # @param tag_id [String] ID of the tag you want to fetch
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def get_tag_by_id(tag_id, opts = {})
      data, _status_code, _headers = get_tag_by_id_with_http_info(tag_id, opts)
      data
    end

    # Get a Tag by ID
    # Retrieve a tag based on the provided tag ID
    # @param tag_id [String] ID of the tag you want to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Integer, Hash)>] Tag data, response status code and response headers
    def get_tag_by_id_with_http_info(tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.get_tag_by_id ...'
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling TagsApi.get_tag_by_id"
      end
      # resource path
      local_var_path = '/tag/{tagId}'.sub('{' + 'tagId' + '}', CGI.escape(tag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Tag'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"TagsApi.get_tag_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#get_tag_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Tag
    # Update an existing tag
    # @param tag_request [TagRequest] The tag content
    # @param tag_id [String] ID of the tag to update
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def update_tag(tag_request, tag_id, opts = {})
      data, _status_code, _headers = update_tag_with_http_info(tag_request, tag_id, opts)
      data
    end

    # Update a Tag
    # Update an existing tag
    # @param tag_request [TagRequest] The tag content
    # @param tag_id [String] ID of the tag to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def update_tag_with_http_info(tag_request, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.update_tag ...'
      end
      # verify the required parameter 'tag_request' is set
      if @api_client.config.client_side_validation && tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'tag_request' when calling TagsApi.update_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling TagsApi.update_tag"
      end
      # resource path
      local_var_path = '/tag/{tagId}'.sub('{' + 'tagId' + '}', CGI.escape(tag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tag_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"TagsApi.update_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#update_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
