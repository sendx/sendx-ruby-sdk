=begin
#SendX REST API

## SendX REST API Documentation  ## 🚀 Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - 🔒 **Security**: Team-based authentication with optional member-level access - 🎯 **Resource-Oriented**: RESTful design with clear resource boundaries - 📊 **Rich Data Models**: Three-layer model system (Input/Output/Internal) - 🔗 **Relationships**: Automatic prefix handling for resource relationships - 📈 **Scalable**: Built for high-volume email marketing operations  ## 🏗️ Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## 🔐 Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings → Team API Key  ## 🆔 Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## 📚 Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## 🎯 Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## 🛠️ SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## 📞 Support  Need help? Contact us: - 💬 **Website Chat**: Available on sendx.io - 📧 **Email**: hello@sendx.io - 📚 **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

The version of the OpenAPI document: 1.0.0
Contact: hello@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module SendX
  class CustomFieldApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create custom field
    # Creates a new custom field for storing contact data. 
    # @param rest_e_custom_field [RestECustomField] 
    # @param [Hash] opts the optional parameters
    # @return [RestRCustomField]
    def create_custom_field(rest_e_custom_field, opts = {})
      data, _status_code, _headers = create_custom_field_with_http_info(rest_e_custom_field, opts)
      data
    end

    # Create custom field
    # Creates a new custom field for storing contact data. 
    # @param rest_e_custom_field [RestECustomField] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestRCustomField, Integer, Hash)>] RestRCustomField data, response status code and response headers
    def create_custom_field_with_http_info(rest_e_custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldApi.create_custom_field ...'
      end
      # verify the required parameter 'rest_e_custom_field' is set
      if @api_client.config.client_side_validation && rest_e_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'rest_e_custom_field' when calling CustomFieldApi.create_custom_field"
      end
      # resource path
      local_var_path = '/customfield'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rest_e_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'RestRCustomField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TeamApiKey']

      new_options = opts.merge(
        :operation => :"CustomFieldApi.create_custom_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldApi#create_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom field
    # Deletes a custom field (data is preserved).  **🎯 Key Features:** - Remove unused fields - Data remains on contacts - Clean up field list 
    # @param identifier [String] Custom field identifier to update
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete_custom_field(identifier, opts = {})
      data, _status_code, _headers = delete_custom_field_with_http_info(identifier, opts)
      data
    end

    # Delete custom field
    # Deletes a custom field (data is preserved).  **🎯 Key Features:** - Remove unused fields - Data remains on contacts - Clean up field list 
    # @param identifier [String] Custom field identifier to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_custom_field_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldApi.delete_custom_field ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomFieldApi.delete_custom_field"
      end
      pattern = Regexp.new(/^(field_)?[a-zA-Z0-9]{22}$/)
      if @api_client.config.client_side_validation && identifier !~ pattern
        fail ArgumentError, "invalid value for 'identifier' when calling CustomFieldApi.delete_custom_field, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/customfield/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TeamApiKey']

      new_options = opts.merge(
        :operation => :"CustomFieldApi.delete_custom_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldApi#delete_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all custom fields
    # Retrieves all custom fields defined for your team. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Number of fields to skip for pagination (default to 0)
    # @option opts [Integer] :limit Maximum number of fields to return (default to 10)
    # @option opts [String] :search Search custom fields by name (case-insensitive partial matching).  **Examples:** - &#x60;points&#x60; - Finds \&quot;Loyalty points\&quot;, \&quot;Reward points\&quot; 
    # @return [Array<RestRCustomField>]
    def get_all_custom_fields(opts = {})
      data, _status_code, _headers = get_all_custom_fields_with_http_info(opts)
      data
    end

    # Get all custom fields
    # Retrieves all custom fields defined for your team. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Number of fields to skip for pagination (default to 0)
    # @option opts [Integer] :limit Maximum number of fields to return (default to 10)
    # @option opts [String] :search Search custom fields by name (case-insensitive partial matching).  **Examples:** - &#x60;points&#x60; - Finds \&quot;Loyalty points\&quot;, \&quot;Reward points\&quot; 
    # @return [Array<(Array<RestRCustomField>, Integer, Hash)>] Array<RestRCustomField> data, response status code and response headers
    def get_all_custom_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldApi.get_all_custom_fields ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CustomFieldApi.get_all_custom_fields, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomFieldApi.get_all_custom_fields, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomFieldApi.get_all_custom_fields, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'search'].nil? && opts[:'search'].to_s.length > 100
        fail ArgumentError, 'invalid value for "opts[:"search"]" when calling CustomFieldApi.get_all_custom_fields, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'search'].nil? && opts[:'search'].to_s.length < 2
        fail ArgumentError, 'invalid value for "opts[:"search"]" when calling CustomFieldApi.get_all_custom_fields, the character length must be great than or equal to 2.'
      end

      # resource path
      local_var_path = '/customfield'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RestRCustomField>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TeamApiKey']

      new_options = opts.merge(
        :operation => :"CustomFieldApi.get_all_custom_fields",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldApi#get_all_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom field by ID
    # Retrieves details about a specific custom field. 
    # @param identifier [String] Custom field identifier to update
    # @param [Hash] opts the optional parameters
    # @return [RestRCustomField]
    def get_custom_field(identifier, opts = {})
      data, _status_code, _headers = get_custom_field_with_http_info(identifier, opts)
      data
    end

    # Get custom field by ID
    # Retrieves details about a specific custom field. 
    # @param identifier [String] Custom field identifier to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestRCustomField, Integer, Hash)>] RestRCustomField data, response status code and response headers
    def get_custom_field_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldApi.get_custom_field ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomFieldApi.get_custom_field"
      end
      pattern = Regexp.new(/^(field_)?[a-zA-Z0-9]{22}$/)
      if @api_client.config.client_side_validation && identifier !~ pattern
        fail ArgumentError, "invalid value for 'identifier' when calling CustomFieldApi.get_custom_field, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/customfield/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RestRCustomField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TeamApiKey']

      new_options = opts.merge(
        :operation => :"CustomFieldApi.get_custom_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldApi#get_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update custom field
    # Updates a custom field definition. 
    # @param rest_e_custom_field [RestECustomField] 
    # @param identifier [String] Custom field identifier to update
    # @param [Hash] opts the optional parameters
    # @return [RestRCustomField]
    def update_custom_field(rest_e_custom_field, identifier, opts = {})
      data, _status_code, _headers = update_custom_field_with_http_info(rest_e_custom_field, identifier, opts)
      data
    end

    # Update custom field
    # Updates a custom field definition. 
    # @param rest_e_custom_field [RestECustomField] 
    # @param identifier [String] Custom field identifier to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestRCustomField, Integer, Hash)>] RestRCustomField data, response status code and response headers
    def update_custom_field_with_http_info(rest_e_custom_field, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldApi.update_custom_field ...'
      end
      # verify the required parameter 'rest_e_custom_field' is set
      if @api_client.config.client_side_validation && rest_e_custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'rest_e_custom_field' when calling CustomFieldApi.update_custom_field"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomFieldApi.update_custom_field"
      end
      pattern = Regexp.new(/^(field_)?[a-zA-Z0-9]{22}$/)
      if @api_client.config.client_side_validation && identifier !~ pattern
        fail ArgumentError, "invalid value for 'identifier' when calling CustomFieldApi.update_custom_field, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/customfield/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rest_e_custom_field)

      # return_type
      return_type = opts[:debug_return_type] || 'RestRCustomField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TeamApiKey']

      new_options = opts.merge(
        :operation => :"CustomFieldApi.update_custom_field",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldApi#update_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
