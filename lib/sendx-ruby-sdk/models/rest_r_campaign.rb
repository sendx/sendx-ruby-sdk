=begin
#SendX REST API

## SendX REST API Documentation  ## 🚀 Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - 🔒 **Security**: Team-based authentication with optional member-level access - 🎯 **Resource-Oriented**: RESTful design with clear resource boundaries - 📊 **Rich Data Models**: Three-layer model system (Input/Output/Internal) - 🔗 **Relationships**: Automatic prefix handling for resource relationships - 📈 **Scalable**: Built for high-volume email marketing operations  ## 🏗️ Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## 🔐 Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings → Team API Key  ## 🆔 Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## 📚 Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## 🎯 Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## 🛠️ SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## 📞 Support  Need help? Contact us: - 💬 **Website Chat**: Available on sendx.io - 📧 **Email**: hello@sendx.io - 📚 **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 

The version of the OpenAPI document: 1.0.0
Contact: hello@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module SendX
  class RestRCampaign
    # Encrypted ID of the campaign
    attr_accessor :id

    # Internal campaign name
    attr_accessor :name

    # Email subject line
    attr_accessor :subject

    # Email preview text
    attr_accessor :preheader

    # Sender id
    attr_accessor :sender

    # HTML email content
    attr_accessor :html_content

    # Plain text email content
    attr_accessor :text_content

    # Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
    attr_accessor :schedule_type

    # datetime for scheduled campaigns (required if scheduleType=1)
    attr_accessor :schedule_condition

    # Time-related condition for the campaign
    attr_accessor :time_condition

    # Campaign timezone
    attr_accessor :timezone

    # Timezone for the scheduled send
    attr_accessor :smart_send

    # Send at specified time in each contact's timezone
    attr_accessor :send_in_contacts_timezone

    # Preferred time condition, in case of smartSend and sendInContactTimeZone
    attr_accessor :preferred_time_condition

    # Preferred timezone for smart send optimization
    attr_accessor :preferred_timezone

    # Campaign delivery strategy
    attr_accessor :strategy

    # Included segment IDs
    attr_accessor :included_segments

    # Included list IDs with prefix
    attr_accessor :included_lists

    # Included tag IDs with prefix
    attr_accessor :included_tags

    # Excluded segment IDs
    attr_accessor :excluded_segments

    # Excluded list IDs with prefix
    attr_accessor :excluded_lists

    # Excluded tag IDs with prefix
    attr_accessor :excluded_tags

    attr_accessor :created

    attr_accessor :updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'subject' => :'subject',
        :'preheader' => :'preheader',
        :'sender' => :'sender',
        :'html_content' => :'htmlContent',
        :'text_content' => :'textContent',
        :'schedule_type' => :'scheduleType',
        :'schedule_condition' => :'scheduleCondition',
        :'time_condition' => :'timeCondition',
        :'timezone' => :'timezone',
        :'smart_send' => :'smartSend',
        :'send_in_contacts_timezone' => :'sendInContactsTimezone',
        :'preferred_time_condition' => :'preferredTimeCondition',
        :'preferred_timezone' => :'preferredTimezone',
        :'strategy' => :'strategy',
        :'included_segments' => :'includedSegments',
        :'included_lists' => :'includedLists',
        :'included_tags' => :'includedTags',
        :'excluded_segments' => :'excludedSegments',
        :'excluded_lists' => :'excludedLists',
        :'excluded_tags' => :'excludedTags',
        :'created' => :'created',
        :'updated' => :'updated'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'subject' => :'String',
        :'preheader' => :'String',
        :'sender' => :'String',
        :'html_content' => :'String',
        :'text_content' => :'String',
        :'schedule_type' => :'Integer',
        :'schedule_condition' => :'String',
        :'time_condition' => :'String',
        :'timezone' => :'String',
        :'smart_send' => :'Boolean',
        :'send_in_contacts_timezone' => :'Boolean',
        :'preferred_time_condition' => :'String',
        :'preferred_timezone' => :'String',
        :'strategy' => :'String',
        :'included_segments' => :'Array<String>',
        :'included_lists' => :'Array<String>',
        :'included_tags' => :'Array<String>',
        :'excluded_segments' => :'Array<String>',
        :'excluded_lists' => :'Array<String>',
        :'excluded_tags' => :'Array<String>',
        :'created' => :'Time',
        :'updated' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SendX::RestRCampaign` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SendX::RestRCampaign`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      else
        self.subject = nil
      end

      if attributes.key?(:'preheader')
        self.preheader = attributes[:'preheader']
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      else
        self.sender = nil
      end

      if attributes.key?(:'html_content')
        self.html_content = attributes[:'html_content']
      end

      if attributes.key?(:'text_content')
        self.text_content = attributes[:'text_content']
      end

      if attributes.key?(:'schedule_type')
        self.schedule_type = attributes[:'schedule_type']
      else
        self.schedule_type = 0
      end

      if attributes.key?(:'schedule_condition')
        self.schedule_condition = attributes[:'schedule_condition']
      else
        self.schedule_condition = nil
      end

      if attributes.key?(:'time_condition')
        self.time_condition = attributes[:'time_condition']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'smart_send')
        self.smart_send = attributes[:'smart_send']
      end

      if attributes.key?(:'send_in_contacts_timezone')
        self.send_in_contacts_timezone = attributes[:'send_in_contacts_timezone']
      end

      if attributes.key?(:'preferred_time_condition')
        self.preferred_time_condition = attributes[:'preferred_time_condition']
      end

      if attributes.key?(:'preferred_timezone')
        self.preferred_timezone = attributes[:'preferred_timezone']
      end

      if attributes.key?(:'strategy')
        self.strategy = attributes[:'strategy']
      end

      if attributes.key?(:'included_segments')
        if (value = attributes[:'included_segments']).is_a?(Array)
          self.included_segments = value
        end
      end

      if attributes.key?(:'included_lists')
        if (value = attributes[:'included_lists']).is_a?(Array)
          self.included_lists = value
        end
      else
        self.included_lists = nil
      end

      if attributes.key?(:'included_tags')
        if (value = attributes[:'included_tags']).is_a?(Array)
          self.included_tags = value
        end
      end

      if attributes.key?(:'excluded_segments')
        if (value = attributes[:'excluded_segments']).is_a?(Array)
          self.excluded_segments = value
        end
      end

      if attributes.key?(:'excluded_lists')
        if (value = attributes[:'excluded_lists']).is_a?(Array)
          self.excluded_lists = value
        end
      else
        self.excluded_lists = nil
      end

      if attributes.key?(:'excluded_tags')
        if (value = attributes[:'excluded_tags']).is_a?(Array)
          self.excluded_tags = value
        end
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @subject.nil?
        invalid_properties.push('invalid value for "subject", subject cannot be nil.')
      end

      if @sender.nil?
        invalid_properties.push('invalid value for "sender", sender cannot be nil.')
      end

      if @schedule_type.nil?
        invalid_properties.push('invalid value for "schedule_type", schedule_type cannot be nil.')
      end

      if @schedule_condition.nil?
        invalid_properties.push('invalid value for "schedule_condition", schedule_condition cannot be nil.')
      end

      if @included_lists.nil?
        invalid_properties.push('invalid value for "included_lists", included_lists cannot be nil.')
      end

      if @excluded_lists.nil?
        invalid_properties.push('invalid value for "excluded_lists", excluded_lists cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @subject.nil?
      return false if @sender.nil?
      return false if @schedule_type.nil?
      return false if @schedule_condition.nil?
      return false if @included_lists.nil?
      return false if @excluded_lists.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] subject Value to be assigned
    def subject=(subject)
      if subject.nil?
        fail ArgumentError, 'subject cannot be nil'
      end

      @subject = subject
    end

    # Custom attribute writer method with validation
    # @param [Object] sender Value to be assigned
    def sender=(sender)
      if sender.nil?
        fail ArgumentError, 'sender cannot be nil'
      end

      @sender = sender
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_type Value to be assigned
    def schedule_type=(schedule_type)
      if schedule_type.nil?
        fail ArgumentError, 'schedule_type cannot be nil'
      end

      @schedule_type = schedule_type
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_condition Value to be assigned
    def schedule_condition=(schedule_condition)
      if schedule_condition.nil?
        fail ArgumentError, 'schedule_condition cannot be nil'
      end

      @schedule_condition = schedule_condition
    end

    # Custom attribute writer method with validation
    # @param [Object] included_lists Value to be assigned
    def included_lists=(included_lists)
      if included_lists.nil?
        fail ArgumentError, 'included_lists cannot be nil'
      end

      @included_lists = included_lists
    end

    # Custom attribute writer method with validation
    # @param [Object] excluded_lists Value to be assigned
    def excluded_lists=(excluded_lists)
      if excluded_lists.nil?
        fail ArgumentError, 'excluded_lists cannot be nil'
      end

      @excluded_lists = excluded_lists
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          subject == o.subject &&
          preheader == o.preheader &&
          sender == o.sender &&
          html_content == o.html_content &&
          text_content == o.text_content &&
          schedule_type == o.schedule_type &&
          schedule_condition == o.schedule_condition &&
          time_condition == o.time_condition &&
          timezone == o.timezone &&
          smart_send == o.smart_send &&
          send_in_contacts_timezone == o.send_in_contacts_timezone &&
          preferred_time_condition == o.preferred_time_condition &&
          preferred_timezone == o.preferred_timezone &&
          strategy == o.strategy &&
          included_segments == o.included_segments &&
          included_lists == o.included_lists &&
          included_tags == o.included_tags &&
          excluded_segments == o.excluded_segments &&
          excluded_lists == o.excluded_lists &&
          excluded_tags == o.excluded_tags &&
          created == o.created &&
          updated == o.updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, subject, preheader, sender, html_content, text_content, schedule_type, schedule_condition, time_condition, timezone, smart_send, send_in_contacts_timezone, preferred_time_condition, preferred_timezone, strategy, included_segments, included_lists, included_tags, excluded_segments, excluded_lists, excluded_tags, created, updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SendX.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
