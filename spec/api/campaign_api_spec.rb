=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.1
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SendX::CampaignApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CampaignApi' do
  before do
    # run before each test
    @api_instance = SendX::CampaignApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CampaignApi' do
    it 'should create an instance of CampaignApi' do
      expect(@api_instance).to be_instance_of(SendX::CampaignApi)
    end
  end

  # unit tests for create_campaign
  # Create Campaign
  # Create a new email campaign
  # @param campaign_request The campaign content
  # @param [Hash] opts the optional parameters
  # @return [CreateResponse]
  describe 'create_campaign test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_campaign
  # Delete Campaign
  # Deletes a specific campaign by its campaignId.
  # @param campaign_id The ID of the campaign to delete
  # @param [Hash] opts the optional parameters
  # @return [DeleteCampaign200Response]
  describe 'delete_campaign test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for edit_campaign
  # Edit Campaign
  # Submit edited content for a specific campaign.
  # @param campaign_request 
  # @param campaign_id The ID of the campaign to edit
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'edit_campaign test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_all_campaigns
  # Get All Campaigns
  # Retrieve a list of all campaigns.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Offset for pagination
  # @option opts [Integer] :limit Limit for pagination
  # @option opts [String] :search Search term to filter campaigns
  # @return [Array<Campaign>]
  describe 'get_all_campaigns test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_campaign_by_id
  # Get Campaign By Id
  # Retrieve a specific campaign using its ID.
  # @param campaign_id The ID of the campaign to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'get_campaign_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
