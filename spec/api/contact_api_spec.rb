=begin
#SendX REST API

## Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 

The version of the OpenAPI document: 1.0.1
Contact: support@sendx.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SendX::ContactApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ContactApi' do
  before do
    # run before each test
    @api_instance = SendX::ContactApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ContactApi' do
    it 'should create an instance of ContactApi' do
      expect(@api_instance).to be_instance_of(SendX::ContactApi)
    end
  end

  # unit tests for create_contact
  # Create a contact
  # Create Contact with given data
  # @param contact_request 
  # @param [Hash] opts the optional parameters
  # @return [Response]
  describe 'create_contact test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_contact
  # Delete Contact
  # Deletes Contact
  # @param contact_id The Contact ID to delete
  # @param [Hash] opts the optional parameters
  # @return [Response]
  describe 'delete_contact test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_all_contacts
  # Get All Contacts
  # Find all contacts with optional filters
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Offset for pagination
  # @option opts [Integer] :limit Limit for pagination
  # @option opts [String] :contact_type Filter contacts by type
  # @option opts [String] :search Search term to filter contacts
  # @return [Array<Contact>]
  describe 'get_all_contacts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_contact_by_id
  # Get Contact by ID
  # Retrieve a specific contact by its contactId.
  # @param contact_id The ID of the contact to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for unsubscribe_contact
  # Unsubscribe Contact
  # Unsubscribe a globally existing contact
  # @param contact_id The Contact ID to unsubscribe
  # @param [Hash] opts the optional parameters
  # @return [Response]
  describe 'unsubscribe_contact test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_contact
  # Update Contact
  # Update Contact with given data
  # @param contact_request 
  # @param contact_id The ID of the Contact to update
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'update_contact test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
